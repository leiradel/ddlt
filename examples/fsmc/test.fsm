header {
  #include "Emulator.h"
  #include <string>

  typedef const std::string const_string;
}

fsm Fsm {
  class Application as ctx;

  after {
    ctx.updateMenu();
  }

  Start {
    loadCore(Emulator core) => CoreLoaded {
      if (!ctx.loadCore(core)) {
        forbid;
      }
    }

    quit() => Quit {
      if (!ctx.canQuit()) {
        forbid;
      }
    }
  }

  Quit {}

  CoreLoaded {
    loadGame(const_string path) => GameRunning {
      if (!ctx.loadGame(path)) {
        forbid;
      }
    }

    unloadCore() => Start {
      if (!ctx.unloadCore()) {
        forbid;
      }
    }

    quit() => unloadCore() => quit();
  }

  GameRunning {
    resetGame() => GameRunning {
      ctx.resetGame();
    }

    turbo() => GameTurbo {
      if (ctx.hardcore()) {
        forbid;
      }
    }

    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    pauseGame() => GamePaused {
      if (ctx.hardcore()) {
        forbid;
      }

      ctx.pauseGame(true);
    }

    quit() => unloadGame() => unloadCore() => quit();
  }

  GamePaused {
    resumeGame() => GameRunning {
      ctx.pauseGame(false);
    }

    resetGame() => resumeGame() => resetGame();

    step() => FrameStep;
    
    turbo() => GameTurbo {
      if (ctx.hardcore()) {
        forbid;
      }
    }

    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    quit() => unloadGame() => unloadCore() => quit();
  }

  FrameStep {
    resumeGame() => GamePaused;
  }

  GameTurbo {
    resetGame() => normal() => resetGame();

    normal() => GameRunning;

    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    pauseGame() => GamePaused {
      if (ctx.hardcore()) {
        forbid;
      }

      ctx.pauseGame(true);
    }

    quit() => unloadGame() => unloadCore() => quit();
  }
}
